name: CI

on: [push]

jobs:
  sast_scan:
    name: Running Static Application Security test (SAST)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Install Bandit
      run: pip install bandit

    - name: Run Bandit Scan
      continue-on-error: true
      run: bandit -r . -f json -o bandit-report.json

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-findings
        path: bandit-report.json

  image_scan:
    name: Building Image and Running Image Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Build Docker Image
      run: docker build -f Dockerfile -t imperva-demo-py-api:latest .

    - name: Docker Scout Scan
      uses: docker/scout-action@v1.13.0
      with:
        dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }}
        dockerhub-password: ${{ secrets.DOCKERHUB_PASSWORD }}
        command: quickview,cves
        only-severities: critical,high
        sarif-file: scout-report.sarif

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-scout-findings
        path: scout-report.sarif

    - name: Log in to Docker Hub
      uses: docker/login-action@v3.3.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v6.7.0
      with:
        push: true
        tags: darshandkd/imperva-demo-py-api:latest
        sbom: true

    - name: Analyze Reports with ChatGPT
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python <<EOF
        import os
        import json
        from openai import OpenAI

        # Initialize the OpenAI client
        client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

        # Load the Bandit and Docker Scout reports
        with open('./bandit/bandit-report.json', 'r') as bandit_file:
            bandit_report = json.load(bandit_file)

        with open('./docker-scout/scout-report.sarif', 'r') as scout_file:
            scout_report = scout_file.read()

        # Send the reports to ChatGPT for analysis
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Updated model
            messages=[
                {
                    "role": "system",
                    "content": "You are a security analyst. Analyze SAST and Docker Scout reports and generate a table in Markdown format with columns: Item number, CVE / Concern, Vulnerable version, Fixed version, Steps to fix."
                },
                {
                    "role": "user",
                    "content": f"Bandit Report: {json.dumps(bandit_report)}\nDocker Scout Report: {scout_report}"
                }
            ]
        )

        # Extract and save the response
        analysis = response['choices'][0]['message']['content']
        with open('security_analysis_report.md', 'w') as report_file:
            report_file.write(analysis)
        EOF


    - name: Upload Analysis Report
      uses: actions/upload-artifact@v4
      with:
        name: chatgpt-security-analysis
        path: security_analysis_report.md
